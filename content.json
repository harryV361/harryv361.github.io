[{"title":"spring cloud config","date":"2017-06-20T07:14:22.000Z","path":"2017/06/20/spring cloud config/","text":"1. 简介：spring cloud config是一个分布式的配置中心，集中的来管理所有环境的配置文件，默认使用git来存储，也可以支持svn、本地文件等方式。它分为两个部分：server和client* config-server 服务端，配置中心 * config-client 客户端，客户端调用server端暴露接口获取配置信息 2. 搭建配置中心a. 创建子工程spring-cloud-config-serverb.在子工程的build.gradle文件中加入依赖：12345dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.cloud:spring-cloud-starter-config&apos; compile &apos;org.springframework.cloud:spring-cloud-config-server&apos;&#125; c.创建启动主类12345678@SpringBootApplication@EnableConfigServerpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; d.在application.yml文件中添加仓库等配置信息123456789server: port: 8888spring: cloud: config: server: git: uri: http://git.oschina.net/harryV/cloud-config-repo#file://前缀设置本地文件地址 clone-on-start: true 通过这4个步骤之后，启动应用，一个分布式的配置中心就搭建完成了。 3.配置规则解释url与配置文件的映射关系： 12345/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]/&#123;application&#125;-&#123;profile&#125;.yml/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml/&#123;application&#125;-&#123;profile&#125;.properties/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties 4.客户端使用a. 创建子工程spring-cloud-config-clientb.在子工程的build.gradle文件中加入依赖：123456dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-web&apos; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.cloud:spring-cloud-config-client&apos; compile &apos;org.springframework.cloud:spring-cloud-starter-config&apos;&#125; c.创建启动主类12345678910111213141516171819@EnableAutoConfiguration@ComponentScan@RestController@RefreshScopepublic class Application &#123; @Value(&quot;$&#123;name:World!&#125;&quot;) String name; @RequestMapping(&quot;/&quot;) public String home() &#123; return &quot;Hello &quot; + name; &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; d.在application.yml文件中添加仓库等配置信息123456789101112server: port: 7777spring: application: name: cloud cloud: config: profile: config-dev label: master uri: http://localhost:8888 env: default http://git.oschina.net/harryV/cloud-config-repo/blob/master/cloud-config-dev.yml 文件配置如下： 123456spring: datasource: url: jdbc:mysql://192.168.1.240:3306/carzone_crm?useUnicode=true&amp;amp;characterEncoding=UTF-8 username: tmp password: sfddename: 李喆 在浏览器输入http://localhost:7777/ ，结果如下图所示： 规则详解Git仓库配置访问http://localhost:8888/spring-cloud-service/dev，得到信息12345678910&#123;&quot;name&quot;:&quot;spring-cloud-service&quot;,&quot;profiles&quot;:[&quot;dev&quot;],&quot;label&quot;:&quot;master&quot;,&quot;version&quot;:&quot;139c3e90b8d7493f2258d68c2610b497ea136f6c&quot;,&quot;propertySources&quot;:[&#123;&quot;name&quot;:&quot;http://git.oschina.net/harryV/cloud-config-repo/spring-cloud-service-dev.yml&quot;,&quot;source&quot;:&#123;&quot;spring.datasource.url&quot;:&quot;jdbc:mysql://192.168.1.240:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;,&quot;spring.datasource.username&quot;:&quot;root&quot;,&quot;spring.datasource.password&quot;:&quot;root&quot;&#125;&#125;]&#125; version是git最后一次提交的版本号，工程启动后，控制台输出如下的内容，代表工程启动的过程中会使用git的clone功能，将配置内容clone一份在本地。这样断网或者不能访问github时，也能够加载配置文件。 123Adding property source:file:/var/folders/91/9dcdhz3170d31w3xc4c3t7j00000gn/T/config-repo-8950527188337464643/spring-cloud-service-dev.yml file://前缀设置本地文件地址123456spring: cloud: config: server: git: uri: file://$&#123;user.home&#125;/config-repo 占位符配置uri123456spring: cloud: config: server: git: uri: http://git.oschina.net/harryV/&#123;application&#125; 配置多个仓库12345678910111213141516server: port: 8888spring: cloud: config: server: git: uri: http://git.oschina.net/harryV/cloud-config-repo #默认的仓库，其他仓库没有匹配到时使用默认仓库 repos: simple: https://github.com/simple/config-repo special: pattern: special*/dev*,*special*/dev* uri: https://github.com/special/config-repo local: pattern: local* uri: file:/home/configsvc/config-repo repo中的pattern属性实际上是一个数组，因此您可以使用属性文件中的YAML数组（或[0]，[1]等后缀）绑定到多个模式。如果要运行具有多个配置文件的应用程序，则可能需要执行此操作。例： 1234567891011121314151617spring: cloud: config: server: git: uri: https://github.com/spring-cloud-samples/config-repo repos: development: pattern: - */development - */staging uri: https://github.com/development/config-repo staging: pattern: - */qa - */production uri: https://github.com/staging/config-repo ####配置子目录每个存储库还可以选择将配置文件存储在子目录中，搜索这些目录的模式可以指定为searchPaths。例如： 1234567spring: cloud: config: server: git: uri: https://github.com/spring-cloud-samples/config-repo searchPaths: foo,bar* ####认证分别添加“username”和“password”属性 12345678spring: cloud: config: server: git: uri: https://github.com/spring-cloud-samples/config-repo username: harryV password: 123456 SVN仓库配置####spring-cloud-config-server工程下的build.gradle文件添加依赖：1compile group: &apos;org.tmatesoft.svnkit&apos;, name: &apos;svnkit&apos;, version: &apos;1.8.14&apos; ####然后在application.yml文件中指定svn文件123456spring: cloud: config: server: svn: uri: svn://xxxxxxxx ###安全保护直接在配置中心引入spring security而不用做其他任何事，就能实现对配置中心访问的安全保护 1compile &apos;org.springframework.boot:spring-boot-starter-security&apos; 配置中心启动后，会在控制台打印出密码 1Using default security password: 3b5af610-d886-4d49-ab0c-c49d8115dfa2 或者不使用随机密码，可以配置： 1234security: user: name: user password: 3b5af610-d886-4d49-ab0c-c49d8115dfa2","tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"},{"name":"spring cloud config","slug":"spring-cloud-config","permalink":"http://yoursite.com/tags/spring-cloud-config/"}]},{"title":"spring cloud eureka","date":"2017-06-04T13:20:22.000Z","path":"2017/06/04/spring cloud eureka/","text":"1. 简介：spring cloud eureka是spring cloud netflix微服务组件的一部分，主要负责微服务的服务治理功能。2. 环境准备* JDK: 1.8.0_101 * gradle: 3.3 3. 项目搭建1. 搭建父工程123mkdir spring-cloudcd spring-cloudgradle init 2. 然后创建多模块12mkdir -p spring-cloud-eureka-servermkdir -p spring-cloud-eureka-client 3. 修改gradle配置文件修改根目录下的 settings.gradle 文件，引入子模块：1include &apos;spring-cloud-eureka-server&apos;,&apos;spring-cloud-eureka-client&apos; 4. 修改根目录下的 build.gradle 文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253group &apos;com.lee&apos;buildscript &#123; repositories &#123; jcenter() maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125; maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125; maven &#123; url &quot;http://repo.spring.io/libs-snapshot-local&quot; &#125; &#125; dependencies &#123; classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE&quot;) &#125;&#125;subprojects &#123; apply plugin: &apos;java&apos; apply plugin: &apos;spring-boot&apos; apply plugin: &apos;idea&apos; ext &#123; name = &apos;spring-cloud&apos; description = &apos;spring cloud example&apos; version=&apos;0.0.1-SNAPSHOT&apos; sourceEncoding=&apos;UTF-8&apos; &#125; repositories &#123; mavenCentral() jcenter() maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125; maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125; maven &#123; url &apos;https://repo.spring.io/release/&apos; &#125; maven &#123; url &quot;http://repo.spring.io/libs-snapshot-local&quot; &#125; maven &#123; url &quot;http://repo.spring.io/libs-milestone-local&quot; &#125; maven &#123; url &quot;http://repo.spring.io/libs-release-local&quot; &#125; &#125; dependencies &#123; testCompile &apos;org.springframework.boot:spring-boot-starter-test&apos; testCompile &quot;junit:junit&quot; &#125; dependencyManagement &#123; imports &#123; mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:Brixton.BUILD-SNAPSHOT&quot; &#125; &#125; task &quot;create-dirs&quot; &lt;&lt; &#123; sourceSets*.java.srcDirs*.each &#123; it.mkdirs() &#125; sourceSets*.resources.srcDirs*.each &#123; it.mkdirs() &#125; &#125;&#125; 5. 在spring-cloud-eureka-server下添加build.gradle 文件12cd spring-cloud-eureka-servervi build.gradle build.gradle1234dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.cloud:spring-cloud-starter-eureka-server&apos;&#125; 6. 在spring-cloud-eureka-client.gradle 文件12cd spring-cloud-eureka-clientvi build.gradle build.gradle1234dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.cloud:spring-cloud-starter-eureka&apos;&#125; 7. 在在spring-cloud目录下执行gradle create-dirs命令，创建工程目录8. 通过@EnableEurekaServer启动一个服务注册中心提供给其他应用会话1234567@EnableEurekaServer@SpringBootApplicationpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaServerApplication.class).web(true).run(args); &#125;&#125; 9. 配置文件123456789101112131415161718server: port: 8761spring: application: name: eureka cloud: config: uri: $&#123;CONFIG_SERVER_URL:http://localhost:8888&#125;eureka: client: registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http://localhost:8761/eureka/ instance: hostname: localhost metadataMap: instanceId: $&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125; 10. 启动应用后，访问http://localhost:8761/","tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"},{"name":"eureka","slug":"eureka","permalink":"http://yoursite.com/tags/eureka/"}]},{"title":"spring cloud概括","date":"2017-05-27T03:40:22.000Z","path":"2017/05/27/spring-cloud概括/","text":"Spring Cloud是基于Spring Boot实现的微服务框架，提供了配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话、集群状态管理等功能。 Spring Cloud的子项目包括： Spring Cloud Config：分布式配置管理工具，支持git、svn、本地存储等方式远程管理配置文件。 Spring Cloud Netflix：核心组件，整合了多个Netflix开源套件。 Eureka：服务治理组件，包含服务注册中心、服务注册和发现。 Hystrix：容错管理，实现了断路器模式，对延迟和故障提供容错功能。 Ribbon：为客户端提供负载均衡组件。 Feign：基于Hystrix和Ribbon的声明式服务调用组件。 Zuul：网管组件，提供动态路由、访问过滤等功能。 Archaius：外部API配置管理组件。 …","tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"}]}]