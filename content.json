[{"title":"spring cloud eureka","date":"2017-06-04T13:20:22.000Z","path":"2017/06/04/spring cloud eureka/","text":"1. 简介：spring cloud eureka是spring cloud netflix微服务组件的一部分，主要负责微服务的服务治理功能。2. 环境准备* JDK: 1.8.0_101 * gradle: 3.3 3. 项目搭建1. 搭建父工程123mkdir spring-cloudcd spring-cloudgradle init 2. 然后创建多模块12mkdir -p spring-cloud-eureka-servermkdir -p spring-cloud-eureka-client 3. 修改gradle配置文件修改根目录下的 settings.gradle 文件，引入子模块：1include &apos;spring-cloud-eureka-server&apos;,&apos;spring-cloud-eureka-client&apos; 4. 修改根目录下的 build.gradle 文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253group &apos;com.lee&apos;buildscript &#123; repositories &#123; jcenter() maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125; maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125; maven &#123; url &quot;http://repo.spring.io/libs-snapshot-local&quot; &#125; &#125; dependencies &#123; classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE&quot;) &#125;&#125;subprojects &#123; apply plugin: &apos;java&apos; apply plugin: &apos;spring-boot&apos; apply plugin: &apos;idea&apos; ext &#123; name = &apos;spring-cloud&apos; description = &apos;spring cloud example&apos; version=&apos;0.0.1-SNAPSHOT&apos; sourceEncoding=&apos;UTF-8&apos; &#125; repositories &#123; mavenCentral() jcenter() maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125; maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125; maven &#123; url &apos;https://repo.spring.io/release/&apos; &#125; maven &#123; url &quot;http://repo.spring.io/libs-snapshot-local&quot; &#125; maven &#123; url &quot;http://repo.spring.io/libs-milestone-local&quot; &#125; maven &#123; url &quot;http://repo.spring.io/libs-release-local&quot; &#125; &#125; dependencies &#123; testCompile &apos;org.springframework.boot:spring-boot-starter-test&apos; testCompile &quot;junit:junit&quot; &#125; dependencyManagement &#123; imports &#123; mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:Brixton.BUILD-SNAPSHOT&quot; &#125; &#125; task &quot;create-dirs&quot; &lt;&lt; &#123; sourceSets*.java.srcDirs*.each &#123; it.mkdirs() &#125; sourceSets*.resources.srcDirs*.each &#123; it.mkdirs() &#125; &#125;&#125; 5. 在spring-cloud-eureka-server下添加build.gradle 文件12cd spring-cloud-eureka-servervi build.gradle build.gradle1234dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.cloud:spring-cloud-starter-eureka-server&apos;&#125; 6. 在spring-cloud-eureka-client.gradle 文件12cd spring-cloud-eureka-clientvi build.gradle build.gradle1234dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.cloud:spring-cloud-starter-eureka&apos;&#125; 7. 在在spring-cloud目录下执行gradle create-dirs命令，创建工程目录8. 通过@EnableEurekaServer启动一个服务注册中心提供给其他应用会话1234567@EnableEurekaServer@SpringBootApplicationpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaServerApplication.class).web(true).run(args); &#125;&#125; 9. 配置文件123456789101112131415161718server: port: 8761spring: application: name: eureka cloud: config: uri: $&#123;CONFIG_SERVER_URL:http://localhost:8888&#125;eureka: client: registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http://localhost:8761/eureka/ instance: hostname: localhost metadataMap: instanceId: $&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125; 10. 启动应用后，访问http://localhost:8761/。","tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"},{"name":"eureka","slug":"eureka","permalink":"http://yoursite.com/tags/eureka/"}]},{"title":"spring cloud概括","date":"2017-05-27T03:40:22.000Z","path":"2017/05/27/spring-cloud概括/","text":"Spring Cloud是基于Spring Boot实现的微服务框架，提供了配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话、集群状态管理等功能。 Spring Cloud的子项目包括： Spring Cloud Config：分布式配置管理工具，支持git、svn、本地存储等方式远程管理配置文件。 Spring Cloud Netflix：核心组件，整合了多个Netflix开源套件。 Eureka：服务治理组件，包含服务注册中心、服务注册和发现。 Hystrix：容错管理，实现了断路器模式，对延迟和故障提供容错功能。 Ribbon：为客户端提供负载均衡组件。 Feign：基于Hystrix和Ribbon的声明式服务调用组件。 Zuul：网管组件，提供动态路由、访问过滤等功能。 Archaius：外部API配置管理组件。 …","tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"}]}]